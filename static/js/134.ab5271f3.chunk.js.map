{"version":3,"file":"static/js/134.ab5271f3.chunk.js","mappings":"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","sources":["pages/Movies.jsx","services/api.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByQuery, fetchPopMovies } from 'services/api';\nimport defaultMovieImg from '../images/video-camera.png';\nimport {\n  Container,\n  DefaultBtn,\n  MovieItem,\n  MoviesList,\n  SearchInput,\n  StyledSearch,\n  Title,\n} from 'pages/SharedStyles';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n\n  useEffect(() => {\n    query\n      ? fetchMoviesByQuery(query.trim()).then(res => setMovies(res))\n      : fetchPopMovies().then(res => setMovies(res));\n  }, [query]);\n\n  const location = useLocation();\n\n  return (\n    <Container>\n      <StyledSearch>\n        <Title>Look for movie : </Title>\n        <SearchInput\n          value={query}\n          onChange={e =>\n            setSearchParams(e.target.value ? { query: e.target.value } : {})\n          }\n          type=\"text\"\n          placeholder=\"Search...\"\n        />\n        <DefaultBtn>Let`s find</DefaultBtn>\n      </StyledSearch>\n      <hr />\n      <MoviesList>\n        {movies.map(movie => (\n          <MovieItem key={movie.id}>\n            <Link state={{ from: location }} to={`${movie.id.toString()}`}>\n              {movie.poster ? (\n                <img\n                  src={movie?.poster}\n                  alt={`${movie.title} poster`}\n                  width={200}\n                />\n              ) : (\n                <img src={defaultMovieImg} alt=\"No poster\" width={200} />\n              )}\n\n              <p>{movie.title}</p>\n            </Link>\n          </MovieItem>\n        ))}\n      </MoviesList>\n    </Container>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst ACCESS_KEY = 'fde4dd89a2c817f4c4efb19732e7d4a1';\nconst IMG_BASE_URL = 'http://image.tmdb.org/t/p/w500';\n\nexport const fetchPopMovies = async () => {\n  const {\n    data: { results },\n  } = await axios.get('trending/movie/day', {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n  return extractMoviesData(results);\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n  const { title, overview, poster_path, vote_average, genres } = data;\n\n  return {\n    title,\n    overview,\n    poster: poster_path ? IMG_BASE_URL + poster_path : null,\n    score: Math.floor(vote_average * 10),\n    genres,\n  };\n};\n\nexport async function fetchReviews(id) {\n  const { data } = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n\n  return data?.results;\n}\n\nexport const fetchCast = async id => {\n  const { data } = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n  return data?.cast.map(({ profile_path, name, character, id }) => ({\n    id,\n    photo: profile_path ? IMG_BASE_URL + profile_path : null,\n    name,\n    character,\n  }));\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await axios.get('search/movie', {\n    params: {\n      api_key: ACCESS_KEY,\n      query: query,\n    },\n  });\n  return extractMoviesData(data.results);\n};\n\nfunction extractMoviesData(movies) {\n  const result = movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster: poster_path ? IMG_BASE_URL + poster_path : null,\n  }));\n  // console.log(result);\n  return result;\n}\n"],"names":["_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","useEffect","fetchMoviesByQuery","trim","then","res","fetchPopMovies","location","useLocation","_jsxs","Container","children","StyledSearch","_jsx","Title","SearchInput","value","onChange","e","target","type","placeholder","DefaultBtn","MoviesList","map","movie","MovieItem","Link","state","from","to","concat","id","toString","poster","src","alt","title","width","defaultMovieImg","axios","ACCESS_KEY","IMG_BASE_URL","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","results","_context","prev","next","params","api_key","sent","data","abrupt","extractMoviesData","stop","apply","arguments","fetchMovieById","_ref2","_callee2","_yield$axios$get2","overview","poster_path","vote_average","genres","_context2","score","Math","floor","_x","fetchReviews","_x2","_fetchReviews","_callee5","_yield$axios$get5","_context5","fetchCast","_ref3","_callee3","_yield$axios$get3","_context3","cast","_ref4","profile_path","name","character","photo","_x3","_ref5","_callee4","_yield$axios$get4","_context4","_x4","_ref6"],"sourceRoot":""}