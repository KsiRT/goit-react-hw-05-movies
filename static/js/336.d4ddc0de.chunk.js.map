{"version":3,"file":"static/js/336.d4ddc0de.chunk.js","mappings":"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","sources":["components/Cast/CastStyled.jsx","components/Cast/Cast.jsx","services/api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  grid-gap: 20px;\n  list-style: none;\n  justify-content: center;\n  padding: 0;\n`;\n\nexport const ImageWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  height: 180px;\n  background-color: #e2e2e2;\n\n  img {\n    width: 150px;\n    height: 200px;\n    object-fit: cover;\n  }\n`;\n\nexport const Actor = styled.li`\n  text-align: center;\n  border: 2px solid #888;\n  width: 150px;\n  border-radius: 8px;\n  padding: 2px;\n\n  h3 {\n    font-weight: 500;\n  }\n  p {\n    font-style: italic;\n    color: #bdbdbd;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'services/api';\nimport { Actor, CastList, ImageWrapper } from './CastStyled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const defaultCastImg =\n    'https://community.adobe.com/legacyfs/online/avatars/a829412_stormtrooper_001.png';\n\n  useEffect(() => {\n    fetchCast(movieId)\n      .then(res => setCast(res))\n      .catch(err => console.log(err.message));\n  }, [movieId]);\n  return (\n    <>\n      {cast.length > 0 ? (\n        <CastList>\n          {cast.map(({ name, character, photo, id }) => (\n            <Actor key={id}>\n              <ImageWrapper>\n                {photo ? (\n                  <img src={photo} alt={name} />\n                ) : (\n                  <img src={defaultCastImg} alt=\"No avatar\" />\n                )}\n              </ImageWrapper>\n              <h3>{name}</h3>\n              <p>({character})</p>\n            </Actor>\n          ))}\n        </CastList>\n      ) : (\n        <p>Sorry, we don't have information about cast</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst ACCESS_KEY = 'fde4dd89a2c817f4c4efb19732e7d4a1';\nconst IMG_BASE_URL = 'http://image.tmdb.org/t/p/w500';\n\nexport const fetchPopMovies = async () => {\n  const {\n    data: { results },\n  } = await axios.get('trending/movie/day', {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n  return extractMoviesData(results);\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n  const { title, overview, poster_path, vote_average, genres } = data;\n\n  return {\n    title,\n    overview,\n    poster: poster_path ? IMG_BASE_URL + poster_path : null,\n    score: Math.floor(vote_average * 10),\n    genres,\n  };\n};\n\nexport async function fetchReviews(id) {\n  const { data } = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n\n  return data?.results;\n}\n\nexport const fetchCast = async id => {\n  const { data } = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n  return data?.cast.map(({ profile_path, name, character, id }) => ({\n    id,\n    photo: profile_path ? IMG_BASE_URL + profile_path : null,\n    name,\n    character,\n  }));\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await axios.get('search/movie', {\n    params: {\n      api_key: ACCESS_KEY,\n      query: query,\n    },\n  });\n  return extractMoviesData(data.results);\n};\n\nfunction extractMoviesData(movies) {\n  const result = movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster: poster_path ? IMG_BASE_URL + poster_path : null,\n  }));\n  // console.log(result);\n  return result;\n}\n"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","ImageWrapper","_templateObject2","Actor","_templateObject3","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","fetchCast","then","res","catch","err","console","log","message","_jsx","_Fragment","children","length","map","_ref","name","character","photo","id","_jsxs","src","alt","axios","ACCESS_KEY","IMG_BASE_URL","fetchPopMovies","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","results","_context","prev","next","params","api_key","sent","data","abrupt","extractMoviesData","stop","apply","arguments","fetchMovieById","_ref2","_callee2","_yield$axios$get2","title","overview","poster_path","vote_average","genres","_context2","concat","poster","score","Math","floor","_x","fetchReviews","_x2","_fetchReviews","_callee5","_yield$axios$get5","_context5","_ref3","_callee3","_yield$axios$get3","_context3","_ref4","profile_path","_x3","fetchMoviesByQuery","_ref5","_callee4","query","_yield$axios$get4","_context4","_x4","movies","_ref6"],"sourceRoot":""}